{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPS7rLiAEggpdtnHsopkGJK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ayanbagawan/23CS520/blob/main/lab%20program\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "anzf0tP2Y1gT"
      },
      "source": [
        "# **NUMPY AND PANDAS PROGRAM**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "U-9PSaFBKXmL"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "# Create NumPy arrays\n",
        "a = np.array([1, 2, 3, 4, 5])\n",
        "b = np.array([10, 20, 30, 40, 50])\n",
        "# Arithmetic operations\n",
        "sum_array = a + b\n",
        "diff_array = b - a\n",
        "product_array = a * b\n",
        "# Statistics\n",
        "mean_a = np.mean(a)\n",
        "max_b = np.max(b)\n",
        "min_b = np.min(b)\n",
        "# Display results\n",
        "print(\"Array a:\", a)\n",
        "print(\"Array b:\", b)\n",
        "print(\"Sum:\", sum_array)\n",
        "print(\"Difference:\", diff_array)\n",
        "print(\"Product:\", product_array)\n",
        "print(\"Mean of a:\", mean_a)\n",
        "print(\"Max of b:\", max_b)\n",
        "print(\"Min of b:\", min_b)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "L5Rpiw-2Ky37"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "# Create a 2D array\n",
        "arr = np.array([[1, 2, 3], [4, 5, 6]])\n",
        "\n",
        "# Access elements\n",
        "print(\"Element at (0, 1):\", arr[0, 1])\n",
        "print(\"Second row:\", arr[1])\n",
        "print(arr)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HfVwqGpnLA5s"
      },
      "outputs": [],
      "source": [
        "a = np.array([5, 10, 15])\n",
        "b = np.array([1, 2, 3])\n",
        "\n",
        "# Add arrays\n",
        "result = a + b\n",
        "print(\"Sum:\", result)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SEZCOEnbLQ44"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "rand_array = np.random.randint(1, 100, size=10)\n",
        "print(\"Random Array:\", rand_array)\n",
        "print(\"Maximum:\", np.max(rand_array))\n",
        "print(\"Minimum:\", np.min(rand_array))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pUnqyXgwLfuP"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "arr = np.array([1, 2, 3, 4, 5, 6])\n",
        "# Reshape to 2x3 matrix\n",
        "reshaped = arr.reshape(2, 3)\n",
        "print(\"Reshaped (2x3):\\n\", reshaped)\n",
        "\n",
        "# Flatten back to 1D\n",
        "flattened = reshaped.flatten()\n",
        "print(\"Flattened:\", flattened)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QBOt5NoALnvy"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "arr = np.array([10, 20, 30, 40, 50])\n",
        "# Condition: elements > 25\n",
        "filtered = arr[arr > 25]\n",
        "print(\"Elements > 25:\", filtered)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lnr2MfYNOl2D"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "\n",
        "A = np.array([[1, 2], [3, 4]])\n",
        "B = np.array([[5, 6], [7, 8]])\n",
        "\n",
        "# Matrix multiplication\n",
        "result = np.dot(A, B)\n",
        "\n",
        "print(\"Matrix A:\\n\", A)\n",
        "print(\"Matrix B:\\n\", B)\n",
        "print(\"A x B:\\n\", result)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7N5LGYB3Oysv"
      },
      "outputs": [],
      "source": [
        "data = np.array([1, 2, 3, 4, 5, 6])\n",
        "\n",
        "print(\"Mean:\", np.mean(data))\n",
        "print(\"Median:\", np.median(data))\n",
        "print(\"Standard Deviation:\", np.std(data))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mnxMNvm5O2I5"
      },
      "outputs": [],
      "source": [
        "a = np.arange(0, 10)\n",
        "\n",
        "# From 0 to 2Ï€ with 10 values\n",
        "b = np.linspace(0, 2 * np.pi, 10)\n",
        "\n",
        "print(\"Arange:\", a)\n",
        "print(\"Linspace:\", b)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HKnuOnrCO6yV"
      },
      "outputs": [],
      "source": [
        "matrix = np.array([[1, 2, 3], [4, 5, 6]])\n",
        "\n",
        "transpose = matrix.T\n",
        "\n",
        "print(\"Original:\\n\", matrix)\n",
        "print(\"Transposed:\\n\", transpose)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6pA0sRd2O_Ow"
      },
      "outputs": [],
      "source": [
        "x = np.array([0, np.pi/2, np.pi])\n",
        "\n",
        "# Apply sine function\n",
        "y = np.sin(x)\n",
        "\n",
        "print(\"x values:\", x)\n",
        "print(\"sin(x):\", y)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZBrxUpvxPCRK"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "# Create DataFrame\n",
        "data = {\n",
        "    'Name': ['Alice', 'Bob', 'Charlie'],\n",
        "    'Age': [25, 30, 22],\n",
        "    'Score': [85, 90, 95]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "print(df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hEyr3z1-PLKX"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "data = {\n",
        "    'Name': ['Asha', 'Ravi', 'Neha'],\n",
        "    'Age': [24, 29, 26]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Filter\n",
        "filtered_df = df[df['Age'] > 25]\n",
        "print(filtered_df)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fve26vPRPl0e"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "data = {\n",
        "    'Math': [90, 80, 85],\n",
        "    'Science': [95, 75, 88]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "# Add average score column\n",
        "df['Average'] = (df['Math'] + df['Science']) / 2\n",
        "# Save to CSV\n",
        "print(df)\n",
        "# Save to CSV\n",
        "df.to_csv(\"averages.csv\", index=False)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mG4VN8zzP5Rz"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "x = [1, 2, 3, 4, 5]\n",
        "y = [10, 12, 15, 18, 20]\n",
        "\n",
        "plt.plot(x, y)\n",
        "plt.title(\"Simple Line Graph\")\n",
        "plt.xlabel(\"X values\")\n",
        "plt.ylabel(\"Y values\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A3BzWeIQP9qI"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "students = ['Asha', 'Ravi', 'Neha']\n",
        "scores = [85, 90, 78]\n",
        "\n",
        "plt.bar(students, scores, color='skyblue')\n",
        "plt.title(\"Student Scores\")\n",
        "plt.xlabel(\"Students\")\n",
        "plt.ylabel(\"Marks\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5Pj0B08mQBHX"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "labels = ['Python', 'Java', 'C++', 'C']\n",
        "sizes = [40, 25, 20, 15]\n",
        "\n",
        "plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)\n",
        "plt.title(\"Programming Language Usage\")\n",
        "plt.axis('equal')  # Make it a circle\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ank4L3NFQBGd"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "ages = [18, 22, 21, 25, 30, 30, 27, 25, 22, 19]\n",
        "\n",
        "plt.hist(ages, bins=5, color='green')\n",
        "plt.title(\"Age Distribution\")\n",
        "plt.xlabel(\"Age\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dWN7mUCKQIzP"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "x = [1, 2, 3, 4, 5]\n",
        "y = [5, 7, 6, 8, 10]\n",
        "\n",
        "plt.scatter(x, y, color='red')\n",
        "plt.title(\"Scatter Plot Example\")\n",
        "plt.xlabel(\"X values\")\n",
        "plt.ylabel(\"Y values\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gphsbik0QX50"
      },
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5MIf-luQQS9p"
      },
      "source": [
        "# **Lambda functions**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "q7OEeeyPQZWa"
      },
      "outputs": [],
      "source": [
        "add = lambda x, y: x + y\n",
        "print(add(5, 3))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8pfV3YSzQZU5"
      },
      "outputs": [],
      "source": [
        "square = lambda x: x ** 2\n",
        "print(square(4))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WBugDWxjQjCj"
      },
      "outputs": [],
      "source": [
        "numbers = [1, 2, 3, 4, 5, 6]\n",
        "even_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n",
        "print(even_numbers)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jxYVFgaxQlwu"
      },
      "outputs": [],
      "source": [
        "data = [(1, 'apple'), (3, 'banana'), (2, 'cherry')]\n",
        "sorted_data = sorted(data, key=lambda x: x[1])\n",
        "print(sorted_data)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9XV1JJp2QoZA"
      },
      "outputs": [],
      "source": [
        "multiply = lambda x, y, z: x * y * z\n",
        "print(multiply(2, 3, 4))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hc1DabopQsn0"
      },
      "outputs": [],
      "source": [
        "numbers = [1, 2, 3, 4, 5]\n",
        "doubled = list(map(lambda x: x * 2, numbers))\n",
        "print(doubled)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Aa8f4O4AQyU-"
      },
      "outputs": [],
      "source": [
        "numbers = [10, 15, 20, 25, 30]\n",
        "odds = list(filter(lambda x: x % 2 != 0, numbers))\n",
        "print(odds)  # Output: [15, 25]\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_8SUWUaXQyTt"
      },
      "outputs": [],
      "source": [
        "students = [\n",
        "    {\"name\": \"Alice\", \"score\": 85},\n",
        "    {\"name\": \"Bob\", \"score\": 92},\n",
        "    {\"name\": \"Charlie\", \"score\": 78}\n",
        "]\n",
        "\n",
        "# Sort by score (ascending)\n",
        "sorted_students = sorted(students, key=lambda student: student['score'])\n",
        "print(sorted_students)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "v3XZidbcQ49o"
      },
      "outputs": [],
      "source": [
        "def make_multiplier(n):\n",
        "    return lambda x: x * n\n",
        "\n",
        "double = make_multiplier(2)\n",
        "triple = make_multiplier(3)\n",
        "\n",
        "print(double(5))  # Output: 10\n",
        "print(triple(5))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uRapoPxBQ8uz"
      },
      "outputs": [],
      "source": [
        "check_even = lambda x: \"Even\" if x % 2 == 0 else \"Odd\"\n",
        "print(check_even(4))  # Output: Even\n",
        "print(check_even(7))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "44GGldqURBmz"
      },
      "outputs": [],
      "source": [
        "from functools import reduce\n",
        "\n",
        "numbers = [1, 2, 3, 4]\n",
        "product = reduce(lambda x, y: x * y, numbers)\n",
        "print(product)  # Output: 24\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3PwqzwM7RFpf"
      },
      "outputs": [],
      "source": [
        "names = [\"john\", \"DOE\", \"ALICE\"]\n",
        "capitalized = list(map(lambda name: name.capitalize(), names))\n",
        "print(capitalized)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Po7KLO70RJLA"
      },
      "outputs": [],
      "source": [
        "emails = [\"alice@example.com\", \"bob@test.com\"]\n",
        "domains = list(map(lambda email: email.split('@')[1], emails))\n",
        "print(domains)  # Output: ['example.com', 'test.com']\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AtVSz4LdROqH"
      },
      "outputs": [],
      "source": [
        "numbers = [2, 4, 6, 8]\n",
        "\n",
        "# Check if all numbers are even\n",
        "all_even = all(map(lambda x: x % 2 == 0, numbers))\n",
        "print(all_even)  # Output: True\n",
        "\n",
        "# Check if any number is greater than 5\n",
        "any_gt_5 = any(map(lambda x: x > 5, numbers))\n",
        "print(any_gt_5)  # Output: True\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HeuP0rFbRRgK"
      },
      "outputs": [],
      "source": [
        "words = [\"apple\", \"banana\", \"cherry\", \"fig\"]\n",
        "sorted_words = sorted(words, key=lambda word: len(word))\n",
        "print(sorted_words)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ShOtt5xCRRe8"
      },
      "outputs": [],
      "source": [
        "sentence = \"lambda functions are powerful\"\n",
        "reversed_words = list(map(lambda word: word[::-1], sentence.split()))\n",
        "print(\" \".join(reversed_words))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yjScQZONRcVc"
      },
      "outputs": [],
      "source": [
        "people = [\"Alice Johnson\", \"Bob Smith\", \"Charlie Brown\"]\n",
        "sorted_by_last = sorted(people, key=lambda name: name.split()[-1])\n",
        "print(sorted_by_last)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4woWgru2RcUY"
      },
      "outputs": [],
      "source": [
        "operations = {\n",
        "    'add': lambda x, y: x + y,\n",
        "    'sub': lambda x, y: x - y,\n",
        "    'mul': lambda x, y: x * y,\n",
        "    'div': lambda x, y: x / y if y != 0 else 'Error'\n",
        "}\n",
        "\n",
        "print(operations['add'](10, 5))  # Output: 15\n",
        "print(operations['div'](10, 0))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3pOMOZl-Rk0J"
      },
      "outputs": [],
      "source": [
        "numbers = list(range(1, 21))\n",
        "# Get numbers that are divisible by both 2 and 3\n",
        "filtered = list(filter(lambda x: x % 2 == 0 and x % 3 == 0, numbers))\n",
        "print(filtered)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iLq6pLWXRpUq"
      },
      "outputs": [],
      "source": [
        "check_even_odd = lambda num: \"Even\" if num % 2 == 0 else \"Odd\"\n",
        "    print(check_even_odd(4))\n",
        "    print(check_even_odd(7))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2KKT1YDvR75j"
      },
      "outputs": [],
      "source": [
        "s1 = 'GeeksforGeeks'\n",
        "\n",
        "s2 = lambda func: func.upper()\n",
        "print(s2(s1))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6qjRdaKUR875"
      },
      "outputs": [],
      "source": [
        "n = lambda x: \"Positive\" if x > 0 else \"Negative\" if x < 0 else \"Zero\"\n",
        "\n",
        "print(n(5))\n",
        "print(n(-3))\n",
        "print(n(0))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "icaqWIKCR_nX"
      },
      "outputs": [],
      "source": [
        "li = [lambda arg=x: arg * 10 for x in range(1, 5)]\n",
        "for i in li:\n",
        "    print(i())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "myL1G9v5SCCG"
      },
      "outputs": [],
      "source": [
        "check = lambda x: \"Even\" if x % 2 == 0 else \"Odd\"\n",
        "\n",
        "print(check(4))\n",
        "print(check(7))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XU--X96cSEuP"
      },
      "outputs": [],
      "source": [
        "calc = lambda x, y: (x + y, x * y)\n",
        "\n",
        "res = calc(3, 4)\n",
        "print(res)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eZCBZmP1SHU5"
      },
      "outputs": [],
      "source": [
        "n = [1, 2, 3, 4, 5, 6]\n",
        "even = filter(lambda x: x % 2 == 0, n)\n",
        "print(list(even))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "h8B2xrAESKFa"
      },
      "outputs": [],
      "source": [
        "a = [1, 2, 3, 4]\n",
        "b = map(lambda x: x * 2, a)\n",
        "print(list(b))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-SHdPidqSMPR"
      },
      "outputs": [],
      "source": [
        "from functools import reduce\n",
        "\n",
        "# Example: Find the product of all numbers in a list\n",
        "a = [1, 2, 3, 4]\n",
        "b = reduce(lambda x, y: x * y, a)\n",
        "print(b)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-E6Y94xtSTuK"
      },
      "source": [
        "## **Creating a Pandas Series**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cKvqrsTjSZky"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "\n",
        "s1 = pd.Series([10, 20, 30, 40])\n",
        "print(\"\\nSeries from list:\")\n",
        "print(s1)\n",
        "\n",
        "\n",
        "s2 = pd.Series([1.5, 2.5, 3.5], index=['a', 'b', 'c'])\n",
        "print(\"\\nSeries with custom index:\")\n",
        "print(s2)\n",
        "\n",
        "\n",
        "s3 = pd.Series({'math': 85, 'science': 90, 'english': 78})\n",
        "print(\"\\nSeries from dictionary:\")\n",
        "print(s3)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "J68WfaaK9SAS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hlh0iOr4VWlk"
      },
      "source": [
        "# creating and manipulating panadas series with particular question**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mYxSGNcNSlO2"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "series1 = pd.Series([5, 10, 15, 20, 25], index=['a', 'b', 'c', 'd', 'e'])\n",
        "print(\"Q1 & Q2 - Custom Series:\\n\", series1)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YdBEcHd5T-Wv"
      },
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Jhi1PfwbVRAw"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QFhiAamoU-Ys"
      },
      "outputs": [],
      "source": [
        "print(\"\\nQ3 - Element at 'c':\", series1['c'])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1o8uwsU_YMVW"
      },
      "outputs": [],
      "source": [
        "print(\"\\nQ4 - Max value:\", series1.max())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oRkMOrtCYPal"
      },
      "outputs": [],
      "source": [
        "print(\"\\nQ5 - Series after adding 5:\\n\", series1 + 5)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pVh73citYRzP"
      },
      "outputs": [],
      "source": [
        "prices = pd.Series({'apple': 50, 'banana': 30, 'cherry': 20})\n",
        "print(\"\\nQ6 - Fruit Prices:\\n\", prices)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jrM2CjluYVvu"
      },
      "outputs": [],
      "source": [
        "print(\"\\nQ7 - Prices > 25:\\n\", prices[prices > 25])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vBBXeoudYYD8"
      },
      "outputs": [],
      "source": [
        "print(\"\\nQ8 - After 20% price increase:\\n\", prices * 1.2)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Cf1CxjAcYYCj"
      },
      "outputs": [],
      "source": [
        "extra = pd.Series({'banana': 10, 'cherry': 5, 'date': 15})\n",
        "combined = prices + extra\n",
        "print(\"\\nQ9 - Combined Series:\\n\", combined)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QZ0jkbsiYcND"
      },
      "outputs": [],
      "source": [
        "numbers = pd.Series([12, 15, 18, 22])\n",
        "print(\"\\nQ10 - Mean:\", numbers.mean())\n",
        "print(\"Q10 - Std Dev:\", numbers.std())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qs7tmbiFYeUT"
      },
      "outputs": [],
      "source": [
        "subject1 = pd.Series({'Ravi': 80, 'Priya': 90, 'Kiran': 85})\n",
        "subject2 = pd.Series({'Ravi': 85, 'Priya': 88, 'Kiran': 90})\n",
        "total_marks = subject1 + subject2\n",
        "print(\"\\nQ11 - Total Marks:\\n\", total_marks)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lBEPItGGYeS1"
      },
      "outputs": [],
      "source": [
        "dates = pd.Series(pd.to_datetime(['2025-03-01', '2025-07-15', '2025-12-30']))\n",
        "print(\"\\nQ12 - Extracted Months:\\n\", dates.dt.month)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "c99pUxujYh8l"
      },
      "outputs": [],
      "source": [
        "values = pd.Series([120, 340, 280, 450])\n",
        "print(\"\\nQ13 - Index of max value:\", values.idxmax())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T3qvfq6OV86X"
      },
      "source": [
        "# 1.\tCreate a DataFrame with the given data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MbEdRRYCWC6O"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "data = {\n",
        "    'Name': ['Rupa', 'Sita', 'Geeta'],\n",
        "    'Age': [25, 30, 35],\n",
        "    'City': ['Bagalkot', 'Solapur', 'Gulbarga']\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "print(\"Initial DataFrame:\\n\", df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_JRv0_1PWICb"
      },
      "outputs": [],
      "source": [
        "sorted_df = df.sort_values(by='Age', ascending=False)\n",
        "print(\"\\nSorted by Age (descending):\\n\", sorted_df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JLunt2CBWMN3"
      },
      "outputs": [],
      "source": [
        "df['Salary'] = [50000, 60000, 70000]\n",
        "print(\"\\nDataFrame with Salary:\\n\", df)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2eW9vdwoV84s"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iwSBEK3iWRcY"
      },
      "outputs": [],
      "source": [
        "age_filter = df[df['Age'] > 30]\n",
        "print(\"\\nPeople with Age > 30:\\n\", age_filter)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "H-8ySuMyWSin"
      },
      "outputs": [],
      "source": [
        "df.loc[df['Name'] == 'Sita', 'City'] = 'Bagalkot'\n",
        "print(\"\\nUpdated City for Sita:\\n\", df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ABafN6-GWShM"
      },
      "outputs": [],
      "source": [
        "df_no_city = df.drop('City', axis=1)\n",
        "print(\"\\nDataFrame without City column:\\n\", df_no_city)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1mlU37iMWSft"
      },
      "outputs": [],
      "source": [
        "mean_age = df['Age'].mean()\n",
        "print(\"\\nAverage Age:\", mean_age)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QpL37g3sWfdS"
      },
      "outputs": [],
      "source": [
        "has_bagalkot = df['City'].str.contains('Bagalkot').any()\n",
        "print(\"\\nIs anyone from Bagalkot?\", has_bagalkot)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pwbljesEWidI"
      },
      "outputs": [],
      "source": [
        "sita_info = df[df['Name'] == 'Sita']\n",
        "print(\"\\nInfo for Sita:\\n\", sita_info)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OhsR9IclWibW"
      },
      "outputs": [],
      "source": [
        "city_counts = df['City'].value_counts()\n",
        "print(\"\\nPeople count per city:\\n\", city_counts)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FasmEuFyWlm4"
      },
      "outputs": [],
      "source": [
        "max_salary_person = df[df['Salary'] == df['Salary'].max()]\n",
        "print(\"\\nPerson with highest salary:\\n\", max_salary_person)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aRKKDME0I7nV"
      },
      "source": [
        "# **WEEK 3\n",
        "**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4NAS2PrLJv-C"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "\n",
        "arr = np.array([1, 2, 3, 4])\n",
        "print(arr.sum())\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dOAhQsdOJv9C"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "\n",
        "arr = np.array([1, 2, 3, 4])\n",
        "print(arr.sum())\n",
        "print(arr.mean())\n",
        "print(arr.min())\n",
        "print(arr.max())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5JKaLWvTH5TJ"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import random\n",
        "array = np.random.randint(16,size=(4,4))\n",
        "print(\"Input Array: \\n\",array)\n",
        "print(\"largest number in x axis: \",np.max(array,axis=1))\n",
        "print(\"largest number in y axis: \",np.max(array,axis=0))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Pw4jZEheKKyt"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import random\n",
        "array = np.random.randint(16, size=(4, 4))\n",
        "print(\"Input Array:\\n\", array)\n",
        "print(\"Smallest number in each row (X-axis):\", np.min(array, axis=1))\n",
        "print(\"Smallest number in each column (Y-axis):\", np.min(array, axis=0))\n",
        "print(arr.std())\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "plAuzoPBLXze"
      },
      "outputs": [],
      "source": [
        "arr = np.array([1, 2, 3])\n",
        "print(arr + 2)\n",
        "print(np.sin(arr))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f-G8JF4YLht4"
      },
      "outputs": [],
      "source": [
        "arr = np.array([1, 2, 3])\n",
        "arr2 = np.array([1, 2, 3])\n",
        "print(arr + arr2)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9yhY6BlKLnjW"
      },
      "outputs": [],
      "source": [
        "squared = list(map(lambda x: x**2, arr))\n",
        "print(\"Squared using map:\", squared)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3Yez0bj3LsVH"
      },
      "outputs": [],
      "source": [
        "def square(number):\n",
        "    return number * number\n",
        "\n",
        "nums = [1, 2, 3, 4]\n",
        "squared_numbers = list(map(square, nums))\n",
        "print(squared_numbers)\n",
        "\n",
        "nums1 = [1, 2, 3, 4, 5, 6]\n",
        "squareOfnums1 = list(map(lambda n: n * n, nums1))\n",
        "print(squareOfnums1)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J39Dd3EwMU60"
      },
      "outputs": [],
      "source": [
        "def is_even(n):\n",
        "    if n % 2 == 0:\n",
        "        return True\n",
        "    else:\n",
        "        return False\n",
        "\n",
        "nums = [1, 2, 3, 4]\n",
        "evens = list(filter(is_even, nums))\n",
        "print(evens)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lI4vwoOyMi-S"
      },
      "outputs": [],
      "source": [
        "even = list(filter(lambda x: x % 2 == 0, arr))\n",
        "print(\"Even numbers:\", even)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "r-kEBkcEM4SO"
      },
      "outputs": [],
      "source": [
        "from functools import reduce\n",
        "\n",
        "def sum_all(a, b):\n",
        "    return a + b\n",
        "\n",
        "nums = [1, 2, 3, 4]\n",
        "total_sum = reduce(sum_all, nums)\n",
        "print(total_sum)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3z-4mnDeNDCn"
      },
      "outputs": [],
      "source": [
        "from functools import reduce\n",
        "# Sum of elements\n",
        "total = reduce(lambda x, y: x + y, arr)\n",
        "print(\"Sum using reduce:\", total)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mwamGD3DNKeg"
      },
      "outputs": [],
      "source": [
        "nums = [1,2,3,4]\n",
        "evens = list(filter(lambda n:n%2==0,nums))\n",
        "print(evens)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "Xk55UpgySf7_",
        "outputId": "c0ee8664-7625-43f0-dceb-8d13a6b2e6e5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initial DataFrame:\n",
            "       Name  Age       City\n",
            "0    Alice   25      Delhi\n",
            "1      Bob   30     Mumbai\n",
            "2  Charlie   35  Bangalore\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-9362737f-b5f6-40de-bce3-481794b05d86\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-9362737f-b5f6-40de-bce3-481794b05d86\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Creating a DataFrame\n",
        "data = {\n",
        "    'Name': ['Alice', 'Bob', 'Charlie'],\n",
        "    'Age': [25, 30, 35],\n",
        "    'City': ['Delhi', 'Mumbai', 'Bangalore']\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "print(\"Initial DataFrame:\\n\", df)\n",
        "\n",
        "# ----- Reading a CSV -----\n",
        "# Upload a file manually in Colab\n",
        "from google.colab import files\n",
        "uploaded = files.upload()  # Will prompt for file upload\n",
        "\n",
        "# Get the uploaded filename\n",
        "import io\n",
        "filename = list(uploaded.keys())[0]  # Automatically grabs the uploaded file name\n",
        "df_read = pd.read_csv(io.BytesIO(uploaded[filename]))\n",
        "print(\"\\nRead from CSV:\\n\", df_read)\n",
        "\n",
        "# ----- Writing to a CSV -----\n",
        "df.to_csv('output.csv', index=False)\n",
        "print(\"\\nSaved DataFrame to 'output.csv'\")\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CtzCbKSESf6x"
      },
      "outputs": [],
      "source": [
        "# import pandas as pd\n",
        "import pandas as pd\n",
        "# list of strings\n",
        "lst = ['Apple', 'Mango', 'Banana', 'Pine Apple', 'Grapes', 'Watermelon']\n",
        "# Calling DataFrame constructor on list\n",
        "df = pd.DataFrame(lst)\n",
        "print(df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kdMgREQLTiJd"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Initialise data as a dictionary of lists\n",
        "data = {\n",
        "    'Name': ['Tom', 'nick', 'krish', 'jack'],\n",
        "    'Age': [20, 21, 19, 18]\n",
        "}\n",
        "\n",
        "# Create DataFrame\n",
        "df = pd.DataFrame(data)\n",
        "print(\"Created DataFrame:\\n\", df)\n",
        "\n",
        "# Save the DataFrame to CSV in Colab's current environment\n",
        "df.to_csv('sample_data.csv', index=False)\n",
        "print(\"\\nDataFrame written to 'sample_data.csv'\")\n",
        "\n",
        "# Optionally download the CSV file to your device\n",
        "from google.colab import files\n",
        "files.download('sample_data.csv')\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5V8l1GQRUOWx"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "data = {\n",
        "    'Department': ['HR', 'HR', 'IT', 'IT', 'Finance', 'Finance'],\n",
        "    'Employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eva', 'Frank'],\n",
        "    'Salary': [50000, 55000, 60000, 65000, 70000, 72000],\n",
        "    'Age': [25, 30, 28, 32, 40, 38]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "print(df)\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bO6Cc_NfVGmd"
      },
      "outputs": [],
      "source": [
        "grouped = df.groupby('Department')['Salary'].mean()\n",
        "print(grouped)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sNM5__0-VWIZ"
      },
      "outputs": [],
      "source": [
        "grouped = df.groupby('Department')['Salary'].agg(['mean', 'max', 'min'])\n",
        "print(grouped)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_-ob6J7vVm83"
      },
      "source": [
        "# Add another field to group (if exists)\n",
        "df['Location'] = ['Mumbai', 'Delhi', 'Mumbai', 'Delhi', 'Mumbai', 'Delhi']\n",
        "\n",
        "grouped = df.groupby(['Department', 'Location'])['Salary'].mean()\n",
        "print(grouped)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "q12EffXCVm7_"
      },
      "outputs": [],
      "source": [
        "result = df.groupby('Department').agg({\n",
        "    'Salary': 'mean',\n",
        "    'Age': ['min', 'max']\n",
        "})\n",
        "print(result)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dqRSYoWOVm6a"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "d1 = {\"Name\": [\"Pankaj\", \"Lisa\", \"David\"], \"ID\": [1, 2, 3], \"Role\": [\"CEO\", \"Editor\", \"Author\"]}\n",
        "df = pd.DataFrame(d1)\n",
        "print(df)\n",
        "df_melted = pd.melt(df, id_vars=[\"ID\"],\n",
        "value_vars=[\"Name\", \"Role\"])\n",
        "print(df_melted)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XNFkKrKpXJyW"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "data = {\n",
        "    'Date': ['2024-01-01', '2024-01-01', '2024-01-02', '2024-01-02'],\n",
        "    'City': ['Mumbai', 'Delhi', 'Mumbai', 'Delhi'],\n",
        "    'Temperature': [33, 28, 34, 27]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "print(\"Original:\\n\", df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BMu6APOAXJxB"
      },
      "outputs": [],
      "source": [
        "pivoted = df.pivot(index='Date', columns='City', values='Temperature')\n",
        "print(\"\\nPivoted:\\n\", pivoted)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iDHDcFG-YRPi"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "\n",
        "data = {\n",
        "    'Student': ['Alice', 'Bob', 'Charlie'],\n",
        "    'Math': [85, 90, 78],\n",
        "    'Science': [92, 88, 85],\n",
        "    'English': [75, 80, 72]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "print(\"Original Wide DataFrame:\\n\", df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lyWWLCytY2GK"
      },
      "outputs": [],
      "source": [
        "melted_df = pd.melt(df,\n",
        "                    id_vars=['Student'],\n",
        "                    var_name='Subject',\n",
        "                    value_name='Marks')\n",
        "print(\"\\nMelted Long DataFrame:\\n\", melted_df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "i7wgR-bjZr97"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "dates = pd.date_range(start='2024-01-01', periods=10, freq='D')\n",
        "print(\"Generated Date Range:\\n\", dates)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ig6yF93gZr80"
      },
      "outputs": [],
      "source": [
        "ts = pd.Series(np.random.randint(100, 200, size=10), index=dates)\n",
        "print(ts)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "l1IVJYmVa5Kx"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "df = pd.DataFrame({\n",
        "    'Date': ['2024-01-01', '2024-01-02', '2024-01-03'],\n",
        "    'Value': [120, 135, 150]\n",
        "})\n",
        "df['Date'] = pd.to_datetime(df['Date'])\n",
        "print(\"Updated DataFrame:\\n\", df)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1hhBMVO0bix-"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "dates = pd.date_range(start='2024-01-01', end='2024-01-10')\n",
        "ts = pd.Series(np.random.randn(len(dates)), index=dates)\n",
        "print(\"Single Date (2024-01-04):\")\n",
        "print(ts['2024-01-04'])\n",
        "print(\"\\nDate Range (2024-01-03 to 2024-01-07):\")\n",
        "print(ts['2024-01-03':'2024-01-07'])\n",
        "print(\"\\nAll data from January 2024:\")\n",
        "print(ts['2024-01'])\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uSDSU6_Mc8j0"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from functools import reduce\n",
        "df = pd.DataFrame({\n",
        "    'Name': ['Alice', 'Bob', 'Charlie', 'David'],\n",
        "    'Age': [25, 32, 30, 29],\n",
        "    'Salary': [50000, 60000, 55000, 52000]\n",
        "})\n",
        "print(df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "a5BK3UaDdpjD"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "data = {\n",
        "    'Name': ['Alice', 'Bob', 'Charlie'],\n",
        "    'Salary': [50000, 60000, 55000],\n",
        "    'Age': [25, 32, 28]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "df['Updated_Salary'] = df['Salary'].apply(lambda x: x * 1.10)\n",
        "df['Age_Group'] = df['Age'].apply(lambda x: 'Young' if x < 30 else 'Adult')\n",
        "print(\"Updated DataFrame:\\n\", df)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "757kXcEAekOo"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "data = {\n",
        "    'Name': ['Alice', 'Bob', 'Charlie'],\n",
        "    'Salary': [50000, 60000, 55000],\n",
        "    'Age': [25, 32, 28]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "df['Name_Upper'] = df['Name'].map(lambda x: x.upper())\n",
        "salary_levels = {50000: 'Low', 55000: 'Medium', 60000: 'High'}\n",
        "df['Salary_Level'] = df['Salary'].map(salary_levels)\n",
        "print(\"Updated DataFrame:\\n\", df)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EsTIhMJAfmIb"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "data = {\n",
        "    'Name': ['Alice', 'Bob', 'Charlie', 'Aarav'],\n",
        "    'Salary': [50000, 60000, 55000, 53000],\n",
        "    'Age': [25, 32, 28, 24]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "filtered_salary = df[df['Salary'] > 52000]\n",
        "filtered_name = df[df['Name'].apply(lambda x: x.startswith('A'))]\n",
        "print(\"Employees with salary > 52000:\\n\", filtered_salary)\n",
        "print(\"\\nEmployees whose names start with 'A':\\n\", filtered_name)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "N0KqsLDihOdg"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from functools import reduce\n",
        "data = {\n",
        "    'Name': ['Alice', 'Bob', 'Charlie'],\n",
        "    'Age': [25, 32, 28]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "df['Name_Age'] = df.apply(\n",
        "    lambda row: reduce(lambda a, b: str(a) + '_' + str(b), [row['Name'], row['Age']]),\n",
        "    axis=1\n",
        ")\n",
        "print(\"Updated DataFrame:\\n\", df)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **GRAPHS\n",
        "**"
      ],
      "metadata": {
        "id": "SDEFiDO6z060"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LEYdKdr2hOcP"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "# Sample data\n",
        "categories = ['Category A', 'Category B', 'Category C']\n",
        "amounts = [25, 50, 30]\n",
        "# Create a bar chart\n",
        "plt.bar(categories, amounts)\n",
        "# Adding labels\n",
        "plt.xlabel('Categories')\n",
        "plt.ylabel('Amounts')\n",
        "plt.title('Bar Chart of Amounts by Category')\n",
        "# Show the plot\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "# Sample data\n",
        "categories = ['Category A', 'Category B', 'Category C']\n",
        "amounts = [25, 50, 30]\n",
        "# Create a pie chart\n",
        "plt.pie(amounts, labels=categories, autopct='%1.1f%%')\n",
        "# Adding a title\n",
        "plt.title('Pie Chart of Amounts by Category')\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "cvKMpKVX0GM9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "# Sample data\n",
        "years = [2010, 2011, 2012, 2013, 2014]\n",
        "amounts = [100, 120, 140, 110, 150]\n",
        "# Create a line chart\n",
        "plt.plot(years, amounts, marker='o', linestyle='-')\n",
        "# Adding labels and a title\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Amount')\n",
        "plt.title('Line Chart of Amounts Over Time')\n",
        "# Show the plot\n",
        "plt.grid(True)  # Add a grid for better readability\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "SICjDVx51qik"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import matplotlib.pyplot as plt\n",
        "# Sample data\n",
        "x = [10, 20, 30, 40, 50]\n",
        "y = [50, 40, 30, 20, 10]\n",
        "# Create a scatter plot\n",
        "plt.scatter(x, y)\n",
        "# Adding labels and a title\n",
        "plt.xlabel('X-Axis')\n",
        "plt.ylabel('Y-Axis')\n",
        "plt.title('Scatter Plot of X vs. Y')\n",
        "# Show the plot\n",
        "plt.grid(True)  # Add a grid for better readability\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "WrlwumNQ2Tcb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "# Generate random data for demonstration\n",
        "data = np.random.randn(1000)  # Replace with your dataset\n",
        "# Create a histogram\n",
        "plt.hist(data, bins=20, edgecolor='k')\n",
        "# Adding labels and a title\n",
        "plt.xlabel('Value')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Histogram of Data')\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "8ToiKsno3wwS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "# Generate random data following a normal distribution\n",
        "mu, sigma = 0, 1\n",
        "data = np.random.normal(mu, sigma, 1000)\n",
        "# Create a histogram\n",
        "plt.hist(data, bins=30, edgecolor='k', alpha=0.7)\n",
        "# Adding labels and a title\n",
        "plt.xlabel('Value')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Histogram of a Normal Distribution')\n",
        "# Show the plot\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "rlMpEki34h1g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "# Generate random data following a uniform distribution\n",
        "low, high = 0, 10\n",
        "data = np.random.uniform(low, high, 1000)\n",
        "# Create a histogram\n",
        "plt.hist(data, bins=20, edgecolor='k', alpha=0.7)\n",
        "# Adding labels and a title\n",
        "plt.xlabel('Value')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Histogram of a Uniform Distribution')\n",
        "# Show the plot\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "V5BV-cpZ4jOA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "# Generate random data following an exponential distribution\n",
        "scale = 1.0\n",
        "data = np.random.exponential(scale, 1000)\n",
        "# Create a histogram\n",
        "plt.hist(data, bins=20, edgecolor='k', alpha=0.7)\n",
        "# Adding labels and a title\n",
        "plt.xlabel('Value')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Histogram of an Exponential Distribution')\n",
        "# Show the plot\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "TQqvGQgu4pP4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "# Generate random data following a normal distribution\n",
        "mu, sigma = 0, 1\n",
        "data = np.random.normal(mu, sigma, 1000)\n",
        "# Create a KDE plot\n",
        "sns.kdeplot(data, shade=True)\n",
        "# Adding labels and a title\n",
        "plt.xlabel('Value')\n",
        "plt.ylabel('Density')\n",
        "plt.title('Kernel Density Estimation (KDE) Plot of a Normal Distribution')\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "h95X6xWC4xjA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import seaborn as sns\n",
        "# Generate random data for two different distributions\n",
        "data1 = np.random.normal(0, 1, 1000)\n",
        "data2 = np.random.normal(2, 1, 1000)\n",
        "# Create a box plot to compare the two distributions\n",
        "sns.boxplot(data=[data1, data2])\n",
        "# Adding labels and a title\n",
        "plt.xlabel('Distribution')\n",
        "plt.ylabel('Value')\n",
        "plt.title('Box Plot Comparison of Two Distributions')\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "5JUJWjx643rQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import matplotlib.pyplot as plt\n",
        "# Sample data representing proportions\n",
        "categories = ['Category A', 'Category B', 'Category C']\n",
        "proportions = [0.4, 0.3, 0.3]\n",
        "# Create a pie chart\n",
        "plt.pie(proportions, labels=categories, autopct='%1.1f%%')\n",
        "# Adding a title\n",
        "plt.title('Pie Chart of Proportions')\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "W1RqGX-f461A"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "# Sample data representing proportions for multiple categories\n",
        "categories = ['Category A', 'Category B', 'Category C']\n",
        "proportions1 = [0.2, 0.4, 0.1]\n",
        "proportions2 = [0.3, 0.2, 0.4]\n",
        "# Create a stacked bar chart\n",
        "plt.bar(categories, proportions1, label='Group 1')\n",
        "plt.bar(categories, proportions2, bottom=proportions1, label='Group 2')\n",
        "# Adding labels and a legend\n",
        "plt.xlabel('Categories')\n",
        "plt.ylabel('Proportions')\n",
        "plt.title('Stacked Bar Chart of Proportions')\n",
        "plt.legend()\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "bWUL944x4_rY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "# Sample data representing proportions\n",
        "categories = ['Category A', 'Category B', 'Category C']\n",
        "proportions = [0.4, 0.3, 0.3]\n",
        "# Create a horizontal bar chart\n",
        "plt.barh(categories, proportions)\n",
        "# Adding labels and a title\n",
        "plt.xlabel('Proportions')\n",
        "plt.ylabel('Categories')\n",
        "plt.title('Horizontal Bar Chart of Proportions')\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "O8CKboDP5DEI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "# Sample data representing proportions over time\n",
        "years = [2010, 2011, 2012, 2013, 2014]\n",
        "proportions1 = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\n",
        "proportions2 = np.array([0.2, 0.3, 0.4, 0.5, 0.6])\n",
        "\n",
        "# Create a stacked area chart\n",
        "plt.stackplot(years, proportions1, proportions2, labels=['Group 1', 'Group 2'], alpha=0.5)\n",
        "\n",
        "# Adding labels and a legend\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Proportions')\n",
        "plt.title('Stacked Area Chart of Proportions Over Time')\n",
        "plt.legend(loc='upper left')\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "MF42xGJ95F9A"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "# Generate sample data for two variables with a positive association\n",
        "x = np.random.rand(100)\n",
        "y = 2 * x + np.random.rand(100)\n",
        "# Create a scatter plot\n",
        "plt.scatter(x, y)\n",
        "# Adding labels and a title\n",
        "plt.xlabel('X')\n",
        "plt.ylabel('Y')\n",
        "plt.title('Scatter Plot for Bivariate Association')\n",
        "# Show the plot\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Ct-NCwOV5d2f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "# Generate sample time series data\n",
        "time = np.arange(0, 10, 0.1)\n",
        "data = np.sin(time)\n",
        "# Create a line plot\n",
        "plt.plot(time, data)\n",
        "# Adding labels and a title\n",
        "plt.xlabel('Time')\n",
        "plt.ylabel('Value')\n",
        "plt.title('Line Plot for Time Series Data')\n",
        "# Show the plot\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "9MNo2OnI5hBP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "# Generate a random correlation matrix\n",
        "corr_matrix = np.corrcoef(np.random.rand(5, 5))\n",
        "# Create a heatmap\n",
        "sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', square=True)\n",
        "# Adding a title\n",
        "plt.title('Heatmap of Correlation Matrix')\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "g4gIepj-5kdX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import seaborn as sns\n",
        "# Load a sample dataset with multiple variables\n",
        "data = sns.load_dataset(\"iris\")\n",
        "# Create a pair plot to visualize associations between variables\n",
        "sns.pairplot(data, hue=\"species\")\n",
        "# Adding a title\n",
        "plt.suptitle('Pair Plot of Iris Dataset', y=1.02)\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "HTi_WOH45nvn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load a sample dataset with categorical and numeric variables\n",
        "data = sns.load_dataset(\"tips\")\n",
        "\n",
        "# Create a box plot to visualize the association between a categorical variable and a numeric variable\n",
        "sns.boxplot(x=\"day\", y=\"total_bill\", data=data)\n",
        "\n",
        "# Add labels and a title\n",
        "plt.xlabel('Day of the Week')\n",
        "plt.ylabel('Total Bill Amount')\n",
        "plt.title('Box Plot of Total Bill Amount by Day')\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "f5hIPnqa5sbf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "# Generate a sample time series dataset\n",
        "date_rng = pd.date_range(start='2022-01-01', end='2022-12-31', freq='D')\n",
        "time_series_data = np.random.randn(len(date_rng))\n",
        "# Create a time series DataFrame\n",
        "time_series_df = pd.DataFrame(time_series_data, index=date_rng,\n",
        "columns=['Value'])\n",
        "# Create a line plot\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(time_series_df.index, time_series_df['Value'])\n",
        "# Adding labels and a title\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Value')\n",
        "plt.title('Line Plot of Time Series Data')\n",
        "# Show the plot\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "zufTPrdj527P"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "# Generate a sample time series dataset\n",
        "date_rng = pd.date_range(start='2022-01-01', end='2022-12-31', freq='D')\n",
        "time_series_data = np.random.randn(len(date_rng)).cumsum()\n",
        "# Create a time series DataFrame\n",
        "time_series_df = pd.DataFrame(time_series_data, index=date_rng,\n",
        "columns=['Cumulative Value'])\n",
        "# Create an area plot\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.fill_between(time_series_df.index, time_series_df['Cumulative Value'],\n",
        "color='skyblue')\n",
        "# Adding labels and a title\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Cumulative Value')\n",
        "plt.title('Area Plot of Cumulative Time Series Data')\n",
        "# Show the plot\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "jMEfZWYC56Ln"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "# Generate a sample multivariate time series dataset\n",
        "date_rng = pd.date_range(start='2022-01-01', end='2022-12-31', freq='D')\n",
        "data = {\n",
        "'Value1': np.random.randn(len(date_rng)),\n",
        "'Value2': np.random.randn(len(date_rng))\n",
        "}\n",
        "# Create a time series DataFrame\n",
        "time_series_df = pd.DataFrame(data, index=date_rng)\n",
        "# Create multiple line plots on the same axis\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(time_series_df.index, time_series_df['Value1'], label='Value1')\n",
        "plt.plot(time_series_df.index, time_series_df['Value2'], label='Value2')\n",
        "# Adding labels, a legend, and a title\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Value')\n",
        "plt.title('Multiple Line Plots of Multivariate Time Series Data')\n",
        "plt.legend()\n",
        "# Show the plot\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "iN4P7YE_595n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Install required packages\n",
        "!pip install statsmodels --quiet\n",
        "!pip install matplotlib pandas numpy --quiet\n",
        "\n",
        "# Import necessary libraries\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from statsmodels.tsa.seasonal import seasonal_decompose\n",
        "\n",
        "# Generate a sample time series dataset with seasonality\n",
        "np.random.seed(42)  # For reproducibility\n",
        "date_rng = pd.date_range(start='2022-01-01', end='2022-12-31', freq='D')\n",
        "seasonality = np.sin(2 * np.pi * date_rng.dayofyear / 365)\n",
        "noise = np.random.randn(len(date_rng))\n",
        "time_series_data = noise + 0.2 * seasonality\n",
        "\n",
        "# Create a DataFrame\n",
        "time_series_df = pd.DataFrame({'Date': date_rng, 'Value': time_series_data})\n",
        "time_series_df.set_index('Date', inplace=True)\n",
        "\n",
        "# Decompose the time series\n",
        "result = seasonal_decompose(time_series_df['Value'], model='additive', period=365)\n",
        "\n",
        "# Convert results to DataFrame for easier handling\n",
        "decomp_df = pd.DataFrame({\n",
        "    'Observed': result.observed,\n",
        "    'Trend': result.trend,\n",
        "    'Seasonal': result.seasonal,\n",
        "    'Residual': result.resid\n",
        "}).dropna()  # Drop NaNs introduced by decomposition\n",
        "\n",
        "# Plotting\n",
        "fig, axs = plt.subplots(4, 1, figsize=(14, 10), sharex=True)\n",
        "\n",
        "axs[0].plot(decomp_df.index, decomp_df['Observed'], label='Observed', color='blue')\n",
        "axs[0].set_ylabel('Observed')\n",
        "axs[0].legend()\n",
        "\n",
        "axs[1].plot(decomp_df.index, decomp_df['Trend'], label='Trend', color='orange')\n",
        "axs[1].set_ylabel('Trend')\n",
        "axs[1].legend()\n",
        "\n",
        "axs[2].plot(decomp_df.index, decomp_df['Seasonal'], label='Seasonal', color='green')\n",
        "axs[2].set_ylabel('Seasonal')\n",
        "axs[2].legend()\n",
        "\n",
        "axs[3].plot(decomp_df.index, decomp_df['Residual'], label='Residual', color='red')\n",
        "axs[3].set_ylabel('Residual')\n",
        "axs[3].set_xlabel('Date')\n",
        "axs[3].legend()\n",
        "\n",
        "plt.suptitle('Seasonal Decomposition of Time Series Data', fontsize=16)\n",
        "plt.tight_layout(rect=[0, 0, 1, 0.96])\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "8DvSkUoj6GBf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "5mdJ_Q5b7TEP"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}